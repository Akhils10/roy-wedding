// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_CONNECTION_URL") // uses connection pooling
}

enum GuestType {
  REGULAR
  GROUP
  STAFF
}

model Guest {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String?
  phoneNumber  String?
  isAdmitted   Boolean   @default(false)
  timeAdmitted DateTime?
  tableNumber  Int?
  rsvp         Boolean   @default(false)
  guestType    GuestType @default(REGULAR)
  groupId      String?   @db.ObjectId
  staffId      String?   @db.ObjectId
  group        Group?    @relation(fields: [groupId], references: [id])
  staff        Staff?    @relation(fields: [staffId], references: [id])
  table        Table?    @relation(fields: [tableId], references: [id])
  tableId      String?   @db.ObjectId
  tag          String?
  createdAt    DateTime  @default(now())
}

model Group {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  inviteCount   Int // Total number of invites for the group
  admittedCount Int           @default(0) // Number of admitted members
  tables        Table[]
  members       GroupMember[]
  Guest         Guest[]
}

model GroupMember {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String?
  phoneNumber  String?
  isAdmitted   Boolean   @default(false)
  timeAdmitted DateTime?
  group        Group     @relation(fields: [groupId], references: [id])
  groupId      String    @db.ObjectId
}

model Staff {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phoneNumber   String?
  instagram     String?
  inviteCount   Int // Total number of invites for the staff
  role          String?
  admittedCount Int           @default(0) // Number of admitted members
  members       StaffMember[]
  Guest         Guest[]
}

model StaffMember {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  phoneNumber  String
  isAdmitted   Boolean   @default(false)
  timeAdmitted DateTime?
  staff        Staff     @relation(fields: [staffId], references: [id])
  staffId      String    @db.ObjectId
}

model Table {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  number  Int
  guests  Guest[]
  groupId String? @db.ObjectId
  group   Group?  @relation(fields: [groupId], references: [id])
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  password  String
  roles     Role[]   @default([SUPERADMIN])
  token     String?
  createdAt DateTime @default(now())
}

enum Role {
  ADD_GUEST
  VIEW_GUEST
  VALIDATE_GUEST
  SUPERADMIN
}
